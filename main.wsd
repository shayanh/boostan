@startuml boostan

class Person {
    firstName: String
    lastName: String
    ssn: String
}

class Student {
    studentID: String
}
Student "*" -- "1" Person
Student "*" -- "1" Major

class Professor {
    employeeID: String
}
Professor "*" -- "1" Person

class Major {
    name: String
}
Major "*" -- "1" Degree
Major "1" -- "*" Curriculum

class Degree {
    name: String
}

class Curriculum {
    entranceYear: Integer
}

class Course {
    name: String
}

enum DayOfWeek {
    SAT
    SUN
    MON
    TUE
    WED
    THU
    FRI
}

class Faculty {
    name: String
}
Faculty "1" -- "*" Major

class Session {
    day: DayOfWeek
    startHour: Time
    endHour: Time
    classNo: Integer
}

class ExamSession {
    period: TimeSpan
    classNo: Integer
}

class CourseOffering {
    isOutOfUniversity: Boolean
    capacity: Integer
}

CourseOffering "1" -- "0-3" ExamSession
CourseOffering "*" -- "1" Faculty
CourseOffering "1" -- "*" Session
CourseOffering "*" -- "*" Professor
CourseOffering "*" -- "1" Course
CourseOffering "*" -- "1" Semester

class Semester {
    registerationPeriod: TimeSpan
    editingPeriod: TimeSpan
    eliminationPerion: TimeSpan
}

interface CurriculumBoxPassingStrategy {
}

CurriculumBoxPassingStrategy <|.. PassAll
class PassAll {
}

CurriculumBoxPassingStrategy <|.. PassSomeCredits
class PassSomeCredits {
    minCredits: Integer
}

class CurriculumBox {
    passingStrategy: CurriculumBoxPassingStrategy
}

CurriculumBox "*" -- "1" Curriculum
CurriculumRow "*" -- "1" CurriculumBox

abstract class CurriculumRow {
    isPassed()
}

CurriculumRow "1" -- "*" Credit

CurriculumRow <|-- SpecificCourse
class SpecificCourse {
}

SpecificCourse "1" -- "1" Course

CurriculumRow <|-- AnyCourse
class AnyCourse {
}

class Credit {
    credit: Integer
    type: CreditType
}

enum CreditType {
    THEORY
    PRACTICE
}

abstract class Prerequisite {
}

Prerequisite "*" -- "1" Curriculum
Prerequisite "*" -- "1" Course

Prerequisite <|-- CoursePrerequisite
class CoursePrerequisite {
}
CoursePrerequisite "*" -- "1" Course

Prerequisite <|-- CourseCorequisite
class CourseCorequisite {
}

CourseCorequisite "*" -- "1" Course

Prerequisite <|-- MinCreditPrerequisite
class MinCreditPrerequisite {
    minCredit: Integer
}

class Enrollment {
    grade: Integer
    state: EnrollmentState
    verifyGrade()
    finalizeGrade()
    eliminate()
}

enum EnrollmentState {
    PASSED
    FAILED
    GRADE_VERIFIED
    GRADE_NOT_VERIFIED
    NOT_GRADED
    W_ELIMINATED
    X_ELIMINATED
}

Enrollment "*" -- "1" CourseOffering
Enrollment "*" -- "1" CurriculumRow
Enrollment "*" -- "1" StudentSemester

class StudentSemester {
    registerStartTime: Date
    editingStartTime: Date
    submit()
    finalize()
}
StudentSemester "*" -- "1" Semester
StudentSemester "*" -- "1" Student
StudentSemester "1" -- "1" RegistrationValidationStrategy
StudentSemester "1" -- "1" EliminationMinCreditStrategy

class TimeSpan {
    start: Date
    end: Date
}

class SemesterTranscript {
}
SemesterTranscript "1" -- "1" StudentSemester

class Transcript {
}
Transcript "1" -- "1" Student

class EnrollmentPermission {
    type: EnrollmentPermissionType
}
EnrollmentPermission "*" -- "1" CourseOffering
EnrollmentPermission "*" -- "1" StudentSemester

enum EnrollmentPermissionType {
    MINCREDIT
    MAXCREDIT
    REQUISITE
    SESSION_OVERLAP
    OUT_OF_CURRICULUM
    INTERNSHIP_OVERLAP
}

class RegistrationValidationStrategy {
}

RegistrationValidationStrategy <|-- BachelorRegistrationStrategy
class BachelorRegistrationStrategy {
}

RegistrationValidationStrategy <|-- MasterRegistrationStrategy
class MasterRegistrationStrategy {
}

RegistrationValidationStrategy <|-- PhDRegistrationStrategy
class PhDRegistrationStrategy {
}

interface EliminationMinCreditStrategy {
    getMinCredit()
}
EliminationMinCreditStrategy <|-- BachelorEliminationMinCreditStrategy
EliminationMinCreditStrategy <|-- BachelorShahedEliminationMinCreditStrategy
EliminationMinCreditStrategy <|-- MasterEliminationMinCreditStrategy
EliminationMinCreditStrategy <|-- PhDEliminationMinCreditStrategy

@enduml