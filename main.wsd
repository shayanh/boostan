@startuml boostan

class Person << entity >> {
    firstName: String
    lastName: String
    ssn: String
}

class Student << entity >> {
    studentID: String
}
Student "*" -- "1" Person
Student "*" -- "1" Major
Student "*" -- "1" Curriculum

class Professor << entity >> {
    employeeID: String
}
Professor "*" -- "1" Person

class Major << entity >> {
    name: String
}
Major "*" -- "1" Degree
Major "1" -- "*" Curriculum

class Degree << entity >> {
    name: String
}

class Curriculum << entity >> {
}
Curriculum "1" -- "*" Semester

class Course << entity >> {
    name: String
}
Course "[CreditType]" -- "1" Credit

enum DayOfWeek {
    SAT
    SUN
    MON
    TUE
    WED
    THU
    FRI
}

class Faculty << entity >> {
    name: String
}
Faculty "1" -- "*" Major

class Session << value object >> {
    dayOfWeek: DayOfWeek
    timePeriod: TimePeriod
    place: String
}

class ExamSession << value object >> {
    date: Date
    timePeriod: TimePeriod
    place: String
}

class CourseOffering << entity >> {
    offeredOutside: Boolean
    capacity: Integer
}

CourseOffering "1" -- "0-3" ExamSession
CourseOffering "*" -- "1" Faculty
CourseOffering "1" -- "*" Session
CourseOffering "*" -- "*" Professor
CourseOffering "*" -- "1" Course
CourseOffering "*" -- "1" Semester
CourseOffering "1" -- "*" Student

class Semester << entity >> {
    registerationPeriod: DateTimePeriod
    editingPeriod: DateTimePeriod
    withdrawPeriod: DateTimePeriod
    year: int
    time: SemesterTime
    finished: Boolean
}

enum SemesterTime {
    FALL,
    SPRING,
    SUMMER
}

interface CurriculumBoxPassingStrategy {
}

CurriculumBoxPassingStrategy <|.. PassAll
class PassAll {
}

CurriculumBoxPassingStrategy <|.. PassSomeCredits
class PassSomeCredits {
    minCredits: Integer
}

class CurriculumBox {
    passingStrategy: CurriculumBoxPassingStrategy
}

CurriculumBox "*" -- "1" Curriculum
CurriculumRow "*" -- "1" CurriculumBox

abstract class CurriculumRow << value object >> {
}

CurriculumRow "1" -- "*" Credit

CurriculumRow <|-- SpecificCourse
class SpecificCourse {
}

SpecificCourse "1" -- "1" Course

CurriculumRow <|-- AnyCourse
class AnyCourse {
}

class Credit << value object >> {
    credit: Float
}

enum CreditType {
    THEORY
    PRACTICE
}

abstract class Prerequisite << value object >> {
}

Prerequisite "*" -- "1" Curriculum
Prerequisite "*" -- "1" Course

Prerequisite <|-- CoursePrerequisite
class CoursePrerequisite {
}
CoursePrerequisite "*" -- "1" Course

Prerequisite <|-- CourseCorequisite
class CourseCorequisite {
}

CourseCorequisite "*" -- "1" Course

Prerequisite <|-- MinCreditPrerequisite
class MinCreditPrerequisite {
    minCredit: Integer
}

class Enrollment << entity >> {
    grade: Float
    state: EnrollmentState
}

enum EnrollmentState {
    PASSED
    FAILED
    GRADE_VERIFIED
    GRADE_NOT_VERIFIED
    NOT_GRADED
    WITHDRAWED
    ELIMINATED
}

Enrollment "*" -- "1" CourseOffering
Enrollment "*" -- "1" CurriculumRow
Enrollment "*" -- "1" StudentSemester

class StudentSemester << entity >> {
    registerStartTime: Date
    editingStartTime: Date
    semesterState: SemesterState
}
StudentSemester "*" -- "1" Semester
StudentSemester "*" -- "1" Student
StudentSemester "1" -- "1" RegistrationValidation
StudentSemester "1" -- "1" WithdrawValidation

enum SemesterState {
    REGISTERED
    ELIMINATED
    LEAVED
    FAILED
    FINISHED
}

class TimePeriod << value object >> {
    start: Time
    finish: Time
}

class DateTimePeriod << value object >> {
    start: Date
    finish: Date
}

class EnrollmentPermission << entity >> {
    type: EnrollmentPermissionType
}
EnrollmentPermission "*" -- "1" CourseOffering
EnrollmentPermission "*" -- "1" StudentSemester

enum EnrollmentPermissionType {
    MINCREDIT
    MAXCREDIT
    REQUISITE
    SESSION_OVERLAP
    OUT_OF_CURRICULUM
    INTERNSHIP_OVERLAP
}

abstract class RegistrationValidation {
    errorMessage: String
    validate()
}

RegistrationValidation <|-- BachelorRegistrationValidation
RegistrationValidation <|-- MasterRegistrationValidation
RegistrationValidation <|-- PhDRegistrationValidation

abstract class WithdrawValidation {
    errorMessage: String
    validate()
}
WithdrawValidation <|-- BachelorWithdrawValidation
WithdrawValidation <|-- BachelorShahedWithdrawValidation
WithdrawValidation <|-- MasterWithdrawValidation
WithdrawValidation <|-- PhDWithdrawValidation

@enduml